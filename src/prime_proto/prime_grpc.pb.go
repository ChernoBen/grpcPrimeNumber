// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package prime_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DecompositionClient is the client API for Decomposition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecompositionClient interface {
	PrimeNumberDecomposition(ctx context.Context, in *PrimeNumberDecompositionRequest, opts ...grpc.CallOption) (Decomposition_PrimeNumberDecompositionClient, error)
}

type decompositionClient struct {
	cc grpc.ClientConnInterface
}

func NewDecompositionClient(cc grpc.ClientConnInterface) DecompositionClient {
	return &decompositionClient{cc}
}

func (c *decompositionClient) PrimeNumberDecomposition(ctx context.Context, in *PrimeNumberDecompositionRequest, opts ...grpc.CallOption) (Decomposition_PrimeNumberDecompositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Decomposition_ServiceDesc.Streams[0], "/src.Decomposition/PrimeNumberDecomposition", opts...)
	if err != nil {
		return nil, err
	}
	x := &decompositionPrimeNumberDecompositionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Decomposition_PrimeNumberDecompositionClient interface {
	Recv() (*PrimeNumberDecompositionResponse, error)
	grpc.ClientStream
}

type decompositionPrimeNumberDecompositionClient struct {
	grpc.ClientStream
}

func (x *decompositionPrimeNumberDecompositionClient) Recv() (*PrimeNumberDecompositionResponse, error) {
	m := new(PrimeNumberDecompositionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DecompositionServer is the server API for Decomposition service.
// All implementations must embed UnimplementedDecompositionServer
// for forward compatibility
type DecompositionServer interface {
	PrimeNumberDecomposition(*PrimeNumberDecompositionRequest, Decomposition_PrimeNumberDecompositionServer) error
	mustEmbedUnimplementedDecompositionServer()
}

// UnimplementedDecompositionServer must be embedded to have forward compatible implementations.
type UnimplementedDecompositionServer struct {
}

func (UnimplementedDecompositionServer) PrimeNumberDecomposition(*PrimeNumberDecompositionRequest, Decomposition_PrimeNumberDecompositionServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumberDecomposition not implemented")
}
func (UnimplementedDecompositionServer) mustEmbedUnimplementedDecompositionServer() {}

// UnsafeDecompositionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecompositionServer will
// result in compilation errors.
type UnsafeDecompositionServer interface {
	mustEmbedUnimplementedDecompositionServer()
}

func RegisterDecompositionServer(s grpc.ServiceRegistrar, srv DecompositionServer) {
	s.RegisterService(&Decomposition_ServiceDesc, srv)
}

func _Decomposition_PrimeNumberDecomposition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberDecompositionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DecompositionServer).PrimeNumberDecomposition(m, &decompositionPrimeNumberDecompositionServer{stream})
}

type Decomposition_PrimeNumberDecompositionServer interface {
	Send(*PrimeNumberDecompositionResponse) error
	grpc.ServerStream
}

type decompositionPrimeNumberDecompositionServer struct {
	grpc.ServerStream
}

func (x *decompositionPrimeNumberDecompositionServer) Send(m *PrimeNumberDecompositionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Decomposition_ServiceDesc is the grpc.ServiceDesc for Decomposition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Decomposition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "src.Decomposition",
	HandlerType: (*DecompositionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumberDecomposition",
			Handler:       _Decomposition_PrimeNumberDecomposition_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/prime_proto/prime.proto",
}
